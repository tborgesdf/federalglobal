import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Login endpoint chamado')
    
    // Testar se consegue fazer parse do body
    let body;
    try {
      body = await request.json()
      console.log('‚úÖ Body parseado com sucesso')
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do body:', parseError)
      return NextResponse.json(
        { error: 'Erro ao processar dados da requisi√ß√£o', debug: String(parseError) },
        { status: 400 }
      )
    }
    
    const { cpf, password, gpsData } = body
    
    console.log(`üîç Dados recebidos - CPF: ${cpf}, GPS: ${gpsData ? 'Presente' : 'Ausente'}`)
    
    // Valida√ß√£o b√°sica
    if (!cpf || !password) {
      return NextResponse.json(
        { error: 'CPF e senha s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }
    
    // Validar GPS (obrigat√≥rio)
    if (!gpsData || !gpsData.latitude || !gpsData.longitude) {
      return NextResponse.json(
        { error: 'GPS obrigat√≥rio para acesso ao sistema' },
        { status: 403 }
      )
    }
    
    console.log('‚úÖ Valida√ß√µes b√°sicas passaram')
    
    // Importar depend√™ncias dentro do try/catch
    let CompanyUserService, getDomainContext;
    try {
      const domainModule = await import('../../../../lib/utils/domain')
      const serviceModule = await import('@/lib/services/companyUserService')
      
      getDomainContext = domainModule.getDomainContext
      CompanyUserService = serviceModule.CompanyUserService
      
      console.log('‚úÖ M√≥dulos importados com sucesso')
    } catch (importError) {
      console.error('‚ùå Erro ao importar m√≥dulos:', importError)
      return NextResponse.json(
        { error: 'Erro interno - m√≥dulos', debug: String(importError) },
        { status: 500 }
      )
    }
    
    // Testar domain context
    let domainContext;
    try {
      domainContext = getDomainContext(request.headers.get('host') || undefined)
      console.log(`‚úÖ Domain context: ${domainContext.hostname} (${domainContext.type})`)
    } catch (domainError) {
      console.error('‚ùå Erro no domain context:', domainError)
      return NextResponse.json(
        { error: 'Erro interno - domain', debug: String(domainError) },
        { status: 500 }
      )
    }
    
    // Testar verifica√ß√£o de usu√°rio
    const cleanCpf = cpf.replace(/\D/g, '')
    console.log(`üîç Tentando verificar usu√°rio com CPF: ${cleanCpf}`)
    
    let user;
    try {
      user = await CompanyUserService.verifyLogin(cleanCpf, password)
      console.log(`‚úÖ Verifica√ß√£o de login: ${user ? 'SUCESSO' : 'FALHOU'}`)
    } catch (loginError) {
      console.error('‚ùå Erro na verifica√ß√£o de login:', loginError)
      return NextResponse.json(
        { error: 'Erro na verifica√ß√£o de credenciais', debug: String(loginError) },
        { status: 500 }
      )
    }
    
    if (!user) {
      return NextResponse.json(
        { error: 'CPF ou senha inv√°lidos' },
        { status: 401 }
      )
    }
    
    // Se chegou at√© aqui, √© sucesso b√°sico
    return NextResponse.json({
      success: true,
      message: 'Login simplificado funcionando',
      user: {
        name: user.fullName,
        role: user.role
      }
    })
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor',
        debug: String(error),
        stack: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    )
  }
}