// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo para controle de tentativas de login
model LoginAttempt {
  id              Int       @id @default(autoincrement())
  userId          Int
  ipAddress       String
  userAgent       String    @db.Text
  attemptType     LoginAttemptType
  successful      Boolean   @default(false)
  blockedUntil    DateTime?
  consecutiveFails Int      @default(0)
  lastFailedAt    DateTime?
  createdAt       DateTime  @default(now())
  
  // Relacionamento
  user            CompanyUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
}

// Modelo para controle de sessões ativas
model ActiveSession {
  id              Int       @id @default(autoincrement())
  userId          Int
  sessionToken    String    @unique
  ipAddress       String
  userAgent       String    @db.Text
  deviceInfo      String?   @db.Text // JSON com informações do dispositivo
  lastActivity    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  isActive        Boolean   @default(true)
  
  // Relacionamento
  user            CompanyUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("active_sessions")
}

// Modelo para alertas de segurança
model SecurityAlert {
  id              Int       @id @default(autoincrement())
  userId          Int
  alertType       SecurityAlertType
  message         String    @db.Text
  details         String?   @db.Text // JSON com detalhes do alerta
  severity        AlertSeverity @default(MEDIUM)
  acknowledged    Boolean   @default(false)
  acknowledgedBy  Int?
  acknowledgedAt  DateTime?
  createdAt       DateTime  @default(now())
  
  // Relacionamentos
  user            CompanyUser @relation(fields: [userId], references: [id])
  acknowledgedByUser CompanyUser? @relation("AcknowledgedAlerts", fields: [acknowledgedBy], references: [id])

  @@map("security_alerts")
}

// Modelo para usuários da empresa (Super Admin, Admin, Users)
model CompanyUser {
  id              Int      @id @default(autoincrement())
  cpf             String   @unique
  fullName        String
  birthDate       DateTime
  email           String   @unique
  phone           String
  photo           String?
  role            CompanyRole @default(USER)
  active          Boolean  @default(true)
  protocolNumber  String   @unique
  password        String   // Criptografado
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relacionamentos
  accessLogs      AccessLog[]
  actionLogs      ActionLog[]
  activeSessions  ActiveSession[]
  securityAlerts  SecurityAlert[]
  acknowledgedAlerts SecurityAlert[] @relation("AcknowledgedAlerts")
  loginAttempts   LoginAttempt[]
  createdUsers    CompanyUser[] @relation("UserCreator")
  createdBy       CompanyUser?  @relation("UserCreator", fields: [createdById], references: [id])
  createdById     Int?

  @@map("company_users")
}

// Modelo para captura de dados de rede
model NetworkCapture {
  id                    Int       @id @default(autoincrement())
  accessLogId           Int       @unique
  ipAddress            String
  ipMapLink            String    // Link para mapa do IP
  country              String
  city                 String
  state                String
  timezone             String
  protocol             String
  ports                String    // JSON array das portas
  packetsData          String    @db.Text // JSON com dados dos pacotes
  internetProvider     String    // Operadora (VIVO, Claro, etc)
  proxyVpn             Boolean   @default(false)
  connectionType       String    // Wi-fi, 3G, 4G, 5G
  createdAt            DateTime  @default(now())
  
  // Relacionamento
  accessLog            AccessLog @relation(fields: [accessLogId], references: [id], onDelete: Cascade)

  @@map("network_captures")
}

// Modelo para captura de dados do dispositivo
model DeviceCapture {
  id                Int       @id @default(autoincrement())
  accessLogId       Int       @unique
  operatingSystem   String
  browser           String
  userAgent         String    @db.Text
  navigationData    String?   @db.Text // JSON com dados de navegação
  gpsLatitude       Decimal?  @db.Decimal(10, 8)
  gpsLongitude      Decimal?  @db.Decimal(11, 8)
  gpsMapLink        String?   // Link para mapa GPS
  deviceCountry     String
  deviceCity        String
  deviceState       String
  weatherData       String?   @db.Text // JSON com dados meteorológicos
  createdAt         DateTime  @default(now())
  
  // Relacionamento
  accessLog         AccessLog @relation(fields: [accessLogId], references: [id], onDelete: Cascade)

  @@map("device_captures")
}

// Modelo para logs de acesso
model AccessLog {
  id              Int       @id @default(autoincrement())
  userId          Int?
  clientId        Int?      // Para clientes do sistema
  accessType      AccessType
  sessionId       String    @unique
  accessDateTime  DateTime  @default(now())
  ipAddress       String
  successful      Boolean   @default(true)
  
  // Relacionamentos
  user            CompanyUser?    @relation(fields: [userId], references: [id])
  client          Client?         @relation(fields: [clientId], references: [id])
  networkCapture  NetworkCapture?
  deviceCapture   DeviceCapture?
  actionLogs      ActionLog[]

  @@map("access_logs")
}

// Modelo para logs de ações
model ActionLog {
  id              Int       @id @default(autoincrement())
  accessLogId     Int
  userId          Int
  action          String    // Descrição da ação
  targetTable     String?   // Tabela afetada
  targetId        Int?      // ID do registro afetado
  oldData         String?   @db.Text // JSON com dados anteriores
  newData         String?   @db.Text // JSON com novos dados
  ipAddress       String
  createdAt       DateTime  @default(now())
  
  // Relacionamentos
  accessLog       AccessLog   @relation(fields: [accessLogId], references: [id], onDelete: Cascade)
  user            CompanyUser @relation(fields: [userId], references: [id])

  @@map("action_logs")
}

// Modelo para clientes do sistema
model Client {
  id              Int       @id @default(autoincrement())
  cpf             String?   @unique
  cnpj            String?   @unique
  fullName        String
  email           String    @unique
  phone           String
  active          Boolean   @default(true)
  protocolNumber  String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  processes       Process[]
  accessLogs      AccessLog[]

  @@map("clients")
}

// Modelo para processos
model Process {
  id              Int       @id @default(autoincrement())
  clientId        Int
  title           String
  description     String    @db.Text
  category        ProcessCategory
  priority        Priority  @default(MEDIUM)
  status          ProcessStatus @default(PENDING)
  protocolNumber  String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  client          Client    @relation(fields: [clientId], references: [id])
  attachments     ProcessAttachment[]
  alerts          ProcessAlert[]

  @@map("processes")
}

// Modelo para anexos dos processos
model ProcessAttachment {
  id          Int     @id @default(autoincrement())
  processId   Int
  filename    String
  filepath    String
  filesize    Int
  mimetype    String
  uploadedAt  DateTime @default(now())
  
  // Relacionamento
  process     Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_attachments")
}

// Modelo para alertas dos processos
model ProcessAlert {
  id          Int       @id @default(autoincrement())
  processId   Int
  message     String    @db.Text
  alertType   AlertType @default(INFO)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relacionamento
  process     Process   @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_alerts")
}

// Enums
enum CompanyRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum AccessType {
  SUPER_ADMIN_DASHBOARD
  ADMIN_DASHBOARD
  USER_DASHBOARD
  CLIENT_PORTAL
}

enum ProcessCategory {
  INTELLIGENCE
  COUNTERINTELLIGENCE
  SECURITY
  INVESTIGATION
  COMPLIANCE
  RISK_ASSESSMENT
  MIGRATION
  DOCUMENTATION
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ALERT
}

enum AlertType {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum LoginAttemptType {
  NORMAL_LOGIN
  CONCURRENT_SESSION_ATTEMPT
  BLOCKED_ACCOUNT_ATTEMPT
}

enum SecurityAlertType {
  MULTIPLE_LOGIN_ATTEMPT
  SUSPICIOUS_LOCATION
  UNUSUAL_DEVICE
  CONCURRENT_SESSION
  FAILED_LOGIN_ATTEMPTS
  GPS_SPOOFING
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ContactStatus {
  PENDING
  ANSWERED
  CLOSED
}

// Modelo para usuários do sistema public (não empresa)
model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  cpf             String   @unique
  phone           String
  birthDate       DateTime
  password        String
  role            CompanyRole @default(USER)
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  acceptedTerms   Boolean  @default(false)
  termsAcceptedAt DateTime?
  gpsLatitude     Decimal?  @db.Decimal(10, 8)
  gpsLongitude    Decimal?  @db.Decimal(11, 8)
  deviceInfo      String?  @db.Text // JSON com informações do dispositivo
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("users")
}

// Modelo para formulários de contato do hot site
model ContactForm {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  message         String   @db.Text
  deviceInfo      String?  @db.Text // JSON com informações do dispositivo
  status          ContactStatus @default(PENDING)
  response        String?  @db.Text
  respondedAt     DateTime?
  respondedBy     String?
  createdAt       DateTime @default(now())

  @@map("contact_forms")
}

// Modelo para sessões do chatbot
model ChatSession {
  id              Int      @id @default(autoincrement())
  sessionId       String   @unique
  userMessage     String   @db.Text
  aiResponse      String   @db.Text
  deviceInfo      String?  @db.Text // JSON com informações do dispositivo
  timestamp       DateTime @default(now())
  isActive        Boolean  @default(true)

  @@map("chat_sessions")
}
