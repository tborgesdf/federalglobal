import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Respostas da IA (vers√£o simples - pode ser expandida)
const aiResponses = {
  greeting: [
    "Ol√°! üëã Bem-vindo ao Federal Global! Como posso ajud√°-lo hoje?",
    "Oi! Sou sua assistente virtual. Em que posso ser √∫til?",
    "Ol√°! Estou aqui para ajudar com suas d√∫vidas sobre nossos servi√ßos."
  ],
  services: [
    "Oferecemos an√°lise documental, monitoramento humanizado e relat√≥rios inteligentes. Sobre qual servi√ßo gostaria de saber mais?",
    "Nossos principais servi√ßos s√£o: üõ°Ô∏è An√°lise Documental, üíé Monitoramento Humanizado e üåê Assessoria Inteligente. Qual te interessa?",
    "Somos especializados em solu√ß√µes de intelig√™ncia e monitoramento. Posso explicar melhor algum servi√ßo espec√≠fico?"
  ],
  contact: [
    "Para mais informa√ß√µes, voc√™ pode nos contatar pelo email contato@deltafoxconsult.com.br ou seguir nosso Instagram @federalexpresstrad",
    "Nossa equipe est√° dispon√≠vel! Entre em contato pelo email ou redes sociais. Quer que eu transfira para um atendente humano?",
    "Posso ajudar com informa√ß√µes b√°sicas, mas para detalhes espec√≠ficos, recomendo falar com nossa equipe comercial."
  ],
  default: [
    "Entendo sua d√∫vida. Nossa equipe analisar√° sua solicita√ß√£o e retornar√° em breve. Mais alguma coisa em que posso ajudar?",
    "Obrigada pela sua mensagem! Vou encaminhar para nossa equipe especializada. H√° mais alguma informa√ß√£o que gostaria de saber?",
    "Anotei sua solicita√ß√£o. Um especialista entrar√° em contato em breve. Posso esclarecer mais alguma d√∫vida?"
  ]
}

function generateAIResponse(message: string): string {
  const msg = message.toLowerCase()
  
  if (msg.includes('ol√°') || msg.includes('oi') || msg.includes('bom dia') || msg.includes('boa tarde') || msg.includes('boa noite')) {
    return aiResponses.greeting[Math.floor(Math.random() * aiResponses.greeting.length)]
  }
  
  if (msg.includes('servi√ßo') || msg.includes('produto') || msg.includes('an√°lise') || msg.includes('monitoramento') || msg.includes('relat√≥rio')) {
    return aiResponses.services[Math.floor(Math.random() * aiResponses.services.length)]
  }
  
  if (msg.includes('contato') || msg.includes('telefone') || msg.includes('email') || msg.includes('falar') || msg.includes('atendente')) {
    return aiResponses.contact[Math.floor(Math.random() * aiResponses.contact.length)]
  }
  
  return aiResponses.default[Math.floor(Math.random() * aiResponses.default.length)]
}

export async function POST(request: NextRequest) {
  try {
    const { message, sessionId } = await request.json()

    if (!message) {
      return NextResponse.json(
        { error: 'Mensagem √© obrigat√≥ria' },
        { status: 400 }
      )
    }

    // Capturar informa√ß√µes do dispositivo e rede
    const userAgent = request.headers.get('user-agent') || ''
    const ip = request.headers.get('x-forwarded-for') || 
               request.headers.get('x-real-ip') || 
               '127.0.0.1'
    
    const deviceInfo = {
      userAgent,
      ip,
      timestamp: new Date().toISOString(),
      referer: request.headers.get('referer') || '',
      acceptLanguage: request.headers.get('accept-language') || '',
      sessionId: sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }

    // Gerar resposta da IA
    const aiResponse = generateAIResponse(message)

    // Salvar a conversa no banco (vamos criar uma tabela ChatSession)
    const chatSession = await prisma.chatSession.create({
      data: {
        sessionId: deviceInfo.sessionId,
        userMessage: message,
        aiResponse: aiResponse,
        deviceInfo: JSON.stringify(deviceInfo),
        timestamp: new Date()
      }
    })

    return NextResponse.json({
      success: true,
      response: aiResponse,
      sessionId: deviceInfo.sessionId,
      chatId: chatSession.id
    })

  } catch (error) {
    console.error('Erro no chatbot:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}